{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.3)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module DB where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Db_Types
import qualified DB_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Get_args = Get_args  { get_args_key :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Get_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` get_args_key record  
instance QC.Arbitrary Get_args where 
  arbitrary = M.liftM Get_args (QC.arbitrary)
  shrink obj | obj == default_Get_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Get_args{get_args_key = get_args_key obj} then P.Nothing else P.Just $ default_Get_args{get_args_key = get_args_key obj}
    ]
from_Get_args :: Get_args -> T.ThriftVal
from_Get_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> P.Just (1, ("key",T.TString $ E.encodeUtf8 _v2))) $ get_args_key record
  ]
write_Get_args :: (T.Protocol p, T.Transport t) => p t -> Get_args -> P.IO ()
write_Get_args oprot record = T.writeVal oprot $ from_Get_args record
encode_Get_args :: (T.Protocol p, T.Transport t) => p t -> Get_args -> LBS.ByteString
encode_Get_args oprot record = T.serializeVal oprot $ from_Get_args record
to_Get_args :: T.ThriftVal -> Get_args
to_Get_args (T.TStruct fields) = Get_args{
  get_args_key = P.maybe (get_args_key default_Get_args) (\(_,_val4) -> (case _val4 of {T.TString _val5 -> E.decodeUtf8 _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Get_args _ = P.error "not a struct"
read_Get_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Get_args
read_Get_args iprot = to_Get_args <$> T.readVal iprot (T.T_STRUCT typemap_Get_args)
decode_Get_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Get_args
decode_Get_args iprot bs = to_Get_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Get_args) bs
typemap_Get_args :: T.TypeMap
typemap_Get_args = Map.fromList [(1,("key",T.T_STRING))]
default_Get_args :: Get_args
default_Get_args = Get_args{
  get_args_key = ""}
data Get_result = Get_result  { get_result_success :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Get_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` get_result_success record  
instance QC.Arbitrary Get_result where 
  arbitrary = M.liftM Get_result (QC.arbitrary)
  shrink obj | obj == default_Get_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Get_result{get_result_success = get_result_success obj} then P.Nothing else P.Just $ default_Get_result{get_result_success = get_result_success obj}
    ]
from_Get_result :: Get_result -> T.ThriftVal
from_Get_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v8 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v8))) $ get_result_success record
  ]
write_Get_result :: (T.Protocol p, T.Transport t) => p t -> Get_result -> P.IO ()
write_Get_result oprot record = T.writeVal oprot $ from_Get_result record
encode_Get_result :: (T.Protocol p, T.Transport t) => p t -> Get_result -> LBS.ByteString
encode_Get_result oprot record = T.serializeVal oprot $ from_Get_result record
to_Get_result :: T.ThriftVal -> Get_result
to_Get_result (T.TStruct fields) = Get_result{
  get_result_success = P.maybe (get_result_success default_Get_result) (\(_,_val10) -> (case _val10 of {T.TString _val11 -> E.decodeUtf8 _val11; _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_Get_result _ = P.error "not a struct"
read_Get_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Get_result
read_Get_result iprot = to_Get_result <$> T.readVal iprot (T.T_STRUCT typemap_Get_result)
decode_Get_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Get_result
decode_Get_result iprot bs = to_Get_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Get_result) bs
typemap_Get_result :: T.TypeMap
typemap_Get_result = Map.fromList [(0,("success",T.T_STRING))]
default_Get_result :: Get_result
default_Get_result = Get_result{
  get_result_success = ""}
data Put_args = Put_args  { put_args_key :: LT.Text
  , put_args_value :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Put_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` put_args_key record   `H.hashWithSalt` put_args_value record  
instance QC.Arbitrary Put_args where 
  arbitrary = M.liftM Put_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_Put_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Put_args{put_args_key = put_args_key obj} then P.Nothing else P.Just $ default_Put_args{put_args_key = put_args_key obj}
    , if obj == default_Put_args{put_args_value = put_args_value obj} then P.Nothing else P.Just $ default_Put_args{put_args_value = put_args_value obj}
    ]
from_Put_args :: Put_args -> T.ThriftVal
from_Put_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v14 -> P.Just (1, ("key",T.TString $ E.encodeUtf8 _v14))) $ put_args_key record
  , (\_v14 -> P.Just (2, ("value",T.TString $ E.encodeUtf8 _v14))) $ put_args_value record
  ]
write_Put_args :: (T.Protocol p, T.Transport t) => p t -> Put_args -> P.IO ()
write_Put_args oprot record = T.writeVal oprot $ from_Put_args record
encode_Put_args :: (T.Protocol p, T.Transport t) => p t -> Put_args -> LBS.ByteString
encode_Put_args oprot record = T.serializeVal oprot $ from_Put_args record
to_Put_args :: T.ThriftVal -> Put_args
to_Put_args (T.TStruct fields) = Put_args{
  put_args_key = P.maybe (put_args_key default_Put_args) (\(_,_val16) -> (case _val16 of {T.TString _val17 -> E.decodeUtf8 _val17; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  put_args_value = P.maybe (put_args_value default_Put_args) (\(_,_val16) -> (case _val16 of {T.TString _val18 -> E.decodeUtf8 _val18; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_Put_args _ = P.error "not a struct"
read_Put_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Put_args
read_Put_args iprot = to_Put_args <$> T.readVal iprot (T.T_STRUCT typemap_Put_args)
decode_Put_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Put_args
decode_Put_args iprot bs = to_Put_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Put_args) bs
typemap_Put_args :: T.TypeMap
typemap_Put_args = Map.fromList [(1,("key",T.T_STRING)),(2,("value",T.T_STRING))]
default_Put_args :: Put_args
default_Put_args = Put_args{
  put_args_key = "",
  put_args_value = ""}
data Put_result = Put_result  { put_result_success :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Put_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` put_result_success record  
instance QC.Arbitrary Put_result where 
  arbitrary = M.liftM Put_result (QC.arbitrary)
  shrink obj | obj == default_Put_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Put_result{put_result_success = put_result_success obj} then P.Nothing else P.Just $ default_Put_result{put_result_success = put_result_success obj}
    ]
from_Put_result :: Put_result -> T.ThriftVal
from_Put_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v21 -> P.Just (0, ("success",T.TString $ E.encodeUtf8 _v21))) $ put_result_success record
  ]
write_Put_result :: (T.Protocol p, T.Transport t) => p t -> Put_result -> P.IO ()
write_Put_result oprot record = T.writeVal oprot $ from_Put_result record
encode_Put_result :: (T.Protocol p, T.Transport t) => p t -> Put_result -> LBS.ByteString
encode_Put_result oprot record = T.serializeVal oprot $ from_Put_result record
to_Put_result :: T.ThriftVal -> Put_result
to_Put_result (T.TStruct fields) = Put_result{
  put_result_success = P.maybe (put_result_success default_Put_result) (\(_,_val23) -> (case _val23 of {T.TString _val24 -> E.decodeUtf8 _val24; _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_Put_result _ = P.error "not a struct"
read_Put_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Put_result
read_Put_result iprot = to_Put_result <$> T.readVal iprot (T.T_STRUCT typemap_Put_result)
decode_Put_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Put_result
decode_Put_result iprot bs = to_Put_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Put_result) bs
typemap_Put_result :: T.TypeMap
typemap_Put_result = Map.fromList [(0,("success",T.T_STRING))]
default_Put_result :: Put_result
default_Put_result = Put_result{
  put_result_success = ""}
process_get (seqid, iprot, oprot, handler) = do
  args <- read_Get_args iprot
  (X.catch
    (do
      val <- Iface.get handler (get_args_key args)
      let res = default_Get_result{get_result_success = val}
      T.writeMessageBegin oprot ("get", T.M_REPLY, seqid)
      write_Get_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("get", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_put (seqid, iprot, oprot, handler) = do
  args <- read_Put_args iprot
  (X.catch
    (do
      val <- Iface.put handler (put_args_key args) (put_args_value args)
      let res = default_Put_result{put_result_success = val}
      T.writeMessageBegin oprot ("put", T.M_REPLY, seqid)
      write_Put_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("put", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "get" -> process_get (seqid,iprot,oprot,handler)
  "put" -> process_put (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessageBegin oprot (name,T.M_EXCEPTION,seqid)
    T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
    T.writeMessageEnd oprot
    T.tFlush (T.getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- T.readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  T.readMessageEnd iprot
  P.return P.True
