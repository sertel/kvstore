{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.3)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Db_Types where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


data DBResponse = DBResponse  { dBResponse_value :: P.Maybe LBS.ByteString
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable DBResponse where
  hashWithSalt salt record = salt   `H.hashWithSalt` dBResponse_value record  
instance QC.Arbitrary DBResponse where 
  arbitrary = M.liftM DBResponse (M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_DBResponse = []
             | P.otherwise = M.catMaybes
    [ if obj == default_DBResponse{dBResponse_value = dBResponse_value obj} then P.Nothing else P.Just $ default_DBResponse{dBResponse_value = dBResponse_value obj}
    ]
from_DBResponse :: DBResponse -> T.ThriftVal
from_DBResponse record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> (1, ("value",T.TString _v2))) <$> dBResponse_value record
  ]
write_DBResponse :: (T.Protocol p, T.Transport t) => p t -> DBResponse -> P.IO ()
write_DBResponse oprot record = T.writeVal oprot $ from_DBResponse record
encode_DBResponse :: (T.Protocol p, T.Transport t) => p t -> DBResponse -> LBS.ByteString
encode_DBResponse oprot record = T.serializeVal oprot $ from_DBResponse record
to_DBResponse :: T.ThriftVal -> DBResponse
to_DBResponse (T.TStruct fields) = DBResponse{
  dBResponse_value = P.maybe (P.Nothing) (\(_,_val4) -> P.Just (case _val4 of {T.TString _val5 -> _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_DBResponse _ = P.error "not a struct"
read_DBResponse :: (T.Transport t, T.Protocol p) => p t -> P.IO DBResponse
read_DBResponse iprot = to_DBResponse <$> T.readVal iprot (T.T_STRUCT typemap_DBResponse)
decode_DBResponse :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> DBResponse
decode_DBResponse iprot bs = to_DBResponse $ T.deserializeVal iprot (T.T_STRUCT typemap_DBResponse) bs
typemap_DBResponse :: T.TypeMap
typemap_DBResponse = Map.fromList [(1,("value",T.T_STRING))]
default_DBResponse :: DBResponse
default_DBResponse = DBResponse{
  dBResponse_value = P.Nothing}
