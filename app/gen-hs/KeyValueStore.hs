{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.3)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module KeyValueStore where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Kvservice_Types
import qualified KeyValueStore_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Requests_args = Requests_args  { requests_args_reqs :: (Vector.Vector KVRequest)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Requests_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` requests_args_reqs record  
instance QC.Arbitrary Requests_args where 
  arbitrary = M.liftM Requests_args (QC.arbitrary)
  shrink obj | obj == default_Requests_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Requests_args{requests_args_reqs = requests_args_reqs obj} then P.Nothing else P.Just $ default_Requests_args{requests_args_reqs = requests_args_reqs obj}
    ]
from_Requests_args :: Requests_args -> T.ThriftVal
from_Requests_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v48 -> P.Just (1, ("reqs",T.TList (T.T_STRUCT typemap_KVRequest) $ P.map (\_v50 -> from_KVRequest _v50) $ Vector.toList _v48))) $ requests_args_reqs record
  ]
write_Requests_args :: (T.Protocol p, T.Transport t) => p t -> Requests_args -> P.IO ()
write_Requests_args oprot record = T.writeVal oprot $ from_Requests_args record
encode_Requests_args :: (T.Protocol p, T.Transport t) => p t -> Requests_args -> LBS.ByteString
encode_Requests_args oprot record = T.serializeVal oprot $ from_Requests_args record
to_Requests_args :: T.ThriftVal -> Requests_args
to_Requests_args (T.TStruct fields) = Requests_args{
  requests_args_reqs = P.maybe (requests_args_reqs default_Requests_args) (\(_,_val52) -> (case _val52 of {T.TList _ _val53 -> (Vector.fromList $ P.map (\_v54 -> (case _v54 of {T.TStruct _val55 -> (to_KVRequest (T.TStruct _val55)); _ -> P.error "wrong type"})) _val53); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_Requests_args _ = P.error "not a struct"
read_Requests_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Requests_args
read_Requests_args iprot = to_Requests_args <$> T.readVal iprot (T.T_STRUCT typemap_Requests_args)
decode_Requests_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Requests_args
decode_Requests_args iprot bs = to_Requests_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Requests_args) bs
typemap_Requests_args :: T.TypeMap
typemap_Requests_args = Map.fromList [(1,("reqs",(T.T_LIST (T.T_STRUCT typemap_KVRequest))))]
default_Requests_args :: Requests_args
default_Requests_args = Requests_args{
  requests_args_reqs = Vector.empty}
data Requests_result = Requests_result  { requests_result_success :: (Vector.Vector KVResponse)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Requests_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` requests_result_success record  
instance QC.Arbitrary Requests_result where 
  arbitrary = M.liftM Requests_result (QC.arbitrary)
  shrink obj | obj == default_Requests_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Requests_result{requests_result_success = requests_result_success obj} then P.Nothing else P.Just $ default_Requests_result{requests_result_success = requests_result_success obj}
    ]
from_Requests_result :: Requests_result -> T.ThriftVal
from_Requests_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v58 -> P.Just (0, ("success",T.TList (T.T_STRUCT typemap_KVResponse) $ P.map (\_v60 -> from_KVResponse _v60) $ Vector.toList _v58))) $ requests_result_success record
  ]
write_Requests_result :: (T.Protocol p, T.Transport t) => p t -> Requests_result -> P.IO ()
write_Requests_result oprot record = T.writeVal oprot $ from_Requests_result record
encode_Requests_result :: (T.Protocol p, T.Transport t) => p t -> Requests_result -> LBS.ByteString
encode_Requests_result oprot record = T.serializeVal oprot $ from_Requests_result record
to_Requests_result :: T.ThriftVal -> Requests_result
to_Requests_result (T.TStruct fields) = Requests_result{
  requests_result_success = P.maybe (requests_result_success default_Requests_result) (\(_,_val62) -> (case _val62 of {T.TList _ _val63 -> (Vector.fromList $ P.map (\_v64 -> (case _v64 of {T.TStruct _val65 -> (to_KVResponse (T.TStruct _val65)); _ -> P.error "wrong type"})) _val63); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_Requests_result _ = P.error "not a struct"
read_Requests_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Requests_result
read_Requests_result iprot = to_Requests_result <$> T.readVal iprot (T.T_STRUCT typemap_Requests_result)
decode_Requests_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Requests_result
decode_Requests_result iprot bs = to_Requests_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Requests_result) bs
typemap_Requests_result :: T.TypeMap
typemap_Requests_result = Map.fromList [(0,("success",(T.T_LIST (T.T_STRUCT typemap_KVResponse))))]
default_Requests_result :: Requests_result
default_Requests_result = Requests_result{
  requests_result_success = Vector.empty}
process_requests (seqid, iprot, oprot, handler) = do
  args <- read_Requests_args iprot
  (X.catch
    (do
      val <- Iface.requests handler (requests_args_reqs args)
      let res = default_Requests_result{requests_result_success = val}
      T.writeMessageBegin oprot ("requests", T.M_REPLY, seqid)
      write_Requests_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("requests", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "requests" -> process_requests (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessageBegin oprot (name,T.M_EXCEPTION,seqid)
    T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
    T.writeMessageEnd oprot
    T.tFlush (T.getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- T.readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  T.readMessageEnd iprot
  P.return P.True
